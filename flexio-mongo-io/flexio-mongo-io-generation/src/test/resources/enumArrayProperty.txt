package org.generated.mongo;

import java.lang.Exception;
import java.lang.String;
import java.util.LinkedList;
import java.util.List;
import org.bson.Document;
import org.generated.Test;

public class TestMongoMapper {
  public Test toValue(Document document) {
    Test.Builder builder = Test.builder();
    if (document.get("p") != null) {
      List<String> pDocumentValues = (List)document.get("p");
      Test.P[] pValues = new Test.P[pDocumentValues.size()];
      for (int i = 0 ; i < pValues.length ; i++) {
        try {
          String v = document.get("p").toString();
          Test.P e = Test.P.valueOf(v);
          builder.p(e);
        } catch (Exception e) {
          for (Test.P enumValue : Test.P.values()) {
            if (pDocumentValues.get(i).toString().equalsIgnoreCase(enumValue.name())) {
              pValues[i] = enumValue;
            }
          }
        }
      }
      builder.p(pValues);
    }
    return builder.build();
  }

  public Document toDocument(Test value) {
    Document document = new Document();
    if (value.p() != null) {
      if (value.p() != null) {
        List<String> values = new LinkedList<>();
        for (Test.P val : value.p()) {
          values.add(val != null ? val.name() : null);
        }
        document.put("p", values);
      }
    } else {
      document.put("p", null);
    }
    return document;
  }
}
